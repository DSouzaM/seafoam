#!/usr/bin/env ruby

require 'seafoam'

module Seafoam
  module CFG
    # Implementations of the command-line commands that you can run in Seafoam.
    class Commands
      def initialize(out)
        @out = out
      end

      def run(*args)
        first, *args = args
        case first
        when nil, 'help', '-h', '--help', '-help'
          help(*args)
        else
          files = [first]
          comments = true
          until args.empty?
            arg = args.shift
            if arg.start_with?('-')
              case arg
              when '--no-comments'
                comments = false
              else
                raise ArgumentError, "unexpected option #{arg}"
              end
            else
              files.push arg
            end
          end

          files.each_with_index do |file, n|
            parser = Seafoam::CFG::CFGParser.new(@out, file)
            parser.skip_over_cfg 'After code installation'
            nmethod = parser.read_nmethod

            disassembler = Seafoam::CFG::Disassembler.new(@out)
            @out.puts if n.positive?
            @out.puts "[#{file}]"
            disassembler.disassemble(nmethod, comments)
          end
        end
      end

      def help(*args)
        raise ArgumentError, "unexpected arguments #{args.join(' ')}" unless args.empty?

        @out.puts 'cfg2asm file.cfg...'
        @out.puts '              --no-comments'
      end
    end
  end
end

# This is the 'seafoam' command line entry point.
begin
  # Run the command line.
  commands = Seafoam::CFG::Commands.new($stdout)
  commands.run(*ARGV)
rescue StandardError => e
  if $DEBUG
    # Re-raise the exception so the user sees it, if debugging is
    # enabled (ruby -d).
    raise e
  else
    # Otherwise, just print the message.
    warn "cfg2asm: #{e.message}"
  end
end
